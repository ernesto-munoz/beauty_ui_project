class SeedWords {
  static List<String> wordsList = [
    "abroad",
    "accouchement",
    "advertisement",
    "afeard",
    "affright",
    "ague",
    "aliment",
    "ambuscade",
    "animalcule",
    "apothecary",
    "appetency",
    "assay",
    "asunder",
    "audition",
    "aught",
    "avaunt",
    "bane",
    "baseborn",
    "bedlam",
    "behold",
    "behoof",
    "beldam",
    "bethink",
    "betimes",
    "bibliopole",
    "bijoux",
    "billow",
    "blackguard",
    "blow",
    "bodkin",
    "bootless",
    "breech",
    "bridewell",
    "brimstone",
    "bruit",
    "buck",
    "bumper",
    "burgess",
    "buss",
    "caboose",
    "cadet",
    "caducity",
    "camelopard",
    "cannonade",
    "carl",
    "ceil",
    "champaign",
    "chapman",
    "chicane",
    "circumjacent",
    "cicisbeo",
    "cispontine",
    "cleanse",
    "clerk",
    "clew",
    "clout",
    "collogue",
    "commend",
    "commons",
    "communicant",
    "compass",
    "compeer",
    "con",
    "condition",
    "conjure",
    "contemn",
    "contumely",
    "cordwainer",
    "corrupt",
    "corse",
    "cottier",
    "coxcomb",
    "coz",
    "crinkum-crankum",
    "crookback",
    "crumpet",
    "cruse",
    "cully",
    "cutpurse",
    "dame",
    "damsel",
    "dandiprat",
    "darbies",
    "dark",
    "degrade",
    "degree",
    "delate",
    "demesne",
    "demit",
    "demoralize",
    "dight",
    "discover",
    "disport",
    "dispraise",
    "divers",
    "dot",
    "doxy",
    "drab",
    "drought",
    "egad",
    "embarrass",
    "embouchure",
    "equipage",
    "espousal",
    "estate",
    "esurient",
    "expectations",
    "expiry",
    "fain",
    "fair",
    "fandangle",
    "fane",
    "fare",
    "fell",
    "feminal",
    "fervent",
    "fie",
    "filibeg",
    "fishwife",
    "fizgig",
    "flux",
    "forfend",
    "forsooth",
    "fourscore",
    "freak",
    "frore",
    "froward",
    "fruit",
    "fudge",
    "furbish",
    "gadzooks",
    "gage",
    "gallant",
    "gammer",
    "garland",
    "garth",
    "gaud",
    "gentle",
    "glabriety",
    "glaciate",
    "glebe",
    "glim",
    "goody",
    "grateful",
    "greenwood",
    "grimalkin",
    "gudgeon",
    "guerdon",
    "gyve",
    "habiliment",
    "halt",
    "handmaid",
    "hearken",
    "hence",
    "herbary",
    "hereat",
    "hereunto",
    "hereupon",
    "hie",
    "hight",
    "hither",
    "oar",
    "horse-coper",
    "horseless",
    "host",
    "howbeit",
    "husbandman",
    "immedicable",
    "imminent",
    "indite",
    "inscribe",
    "intelligence",
    "intelligencer",
    "invest",
    "iron",
    "jade",
    "jakes",
    "kickshaw",
    "kine",
    "kirtle",
    "knave",
    "larcener",
    "latchet",
    "laud",
    "laver",
    "learn",
    "leech",
    "leman",
    "levant",
    "levy",
    "lief",
    "like",
    "loathly",
    "lordling",
    "love",
    "Lucifer",
    "lurdan",
    "lying-in",
    "magdalen",
    "mage",
    "magnify",
    "maid",
    "malapert",
    "malison",
    "man-at-arms",
    "marry",
    "mayhap",
    "mazed",
    "measure",
    "meat",
    "mechanical",
    "meet",
    "melodist",
    "methinks",
    "moil",
    "mooncalf",
    "morrow",
    "mummer",
    "natheless",
    "natural",
    "naught",
    "neat",
    "nice",
    "nigh",
    "nithing",
    "noise",
    "numbles",
    "orison",
    "otherwhere",
    "otiose",
    "overbrim",
    "overleap",
    "overset",
    "pale",
    "palfrey",
    "pate",
    "paynim",
    "peccant",
    "peeler",
    "pelf",
    "peradventure",
    "perchance",
    "peregrinate",
    "periapt",
    "pest",
    "pestilence",
    "peterman",
    "physic",
    "picaroon",
    "piepowder",
    "pismire",
    "pistoleer",
    "plain",
    "plight",
    "pollard",
    "poltroon",
    "popinjay",
    "pore",
    "portage",
    "portion",
    "portion",
    "posy",
    "potation",
    "pouncet-box",
    "prithee",
    "profess",
    "purblind",
    "purfle",
    "pythoness",
    "quaggy",
    "quality",
    "quean",
    "quick",
    "quidnunc",
    "quiz",
    "quoth",
    "rack",
    "raiment",
    "rapscallion",
    "rathe-ripe",
    "reave",
    "receipt",
    "recipe",
    "recompense",
    "recreant",
    "rede",
    "reduce",
    "relieve",
    "remit",
    "repair",
    "repulsive",
    "riband",
    "rover",
    "rude",
    "ruth",
    "sables",
    "sacring",
    "saddle-bow",
    "salamander",
    "sanative",
    "sanguinary",
    "saturnism",
    "scantling",
    "scapegrace",
    "scaramouch",
    "schoolman",
    "science",
    "sciolist",
    "scold",
    "scot",
    "scrag",
    "scruple",
    "scullion",
    "scurvy",
    "seizing",
    "sennight",
    "sepulture",
    "shambles",
    "shrift",
    "shrive",
    "silly",
    "sippet",
    "skirt",
    "slay",
    "slipshod",
    "slugabed",
    "small",
    "smite",
    "soak",
    "soft",
    "soil",
    "sooth",
    "sore",
    "speed",
    "spence",
    "statuary",
    "steed",
    "stoup",
    "stripe",
    "strumpet",
    "success",
    "suffer",
    "surety",
    "swain",
    "swash",
    "sweeting",
    "sweetmeat",
    "taiga",
    "tantivy",
    "tapster",
    "tenter",
    "thenceforth",
    "thereunto",
    "therewith",
    "thither",
    "thrice",
    "tilt",
    "timbrel",
    "tis",
    "tithe",
    "tocsin",
    "tope",
    "trespass",
    "trig",
    "trigon",
    "troth",
    "truck",
    "turnkey",
    "tween",
    "tweeny",
    "twelvemonth",
    "uncle",
    "uncommon",
    "unhand",
    "usher",
    "vale",
    "varlet",
    "venery",
    "verily",
    "verse",
    "very",
    "virtue",
    "visionary",
    "wain",
    "waits",
    "ware",
    "wassail",
    "wast",
    "watch",
    "watchful",
    "watchword",
    "weasand",
    "ween",
    "wench",
    "whence",
    "whereat",
    "wherefore",
    "wherewith",
    "whilom",
    "white",
    "whither",
    "wife",
    "wight",
    "wise",
    "withal",
    "without",
    "wondrous",
    "wont",
    "wonted",
    "wright",
    "yclept",
    "yoke",
    "yonder",
    "zounds",
  ];

  static List<String> getSeedWordsList(int n) {
    List<String> selectedWords = new List();
    int count = 0;
    while (count < n) {
      String word = (wordsList..shuffle()).first;
      if (!selectedWords.contains(word)) {
        selectedWords.add(word);
        count++;
      }
    }
    return selectedWords;
  }
}
